/**
 * \page muqinstall MUQ Installation Guide
 *
 * \section Getting MUQ2
 * MUQ2 is hosted on our <a href=https://bitbucket.org/mituq/muq2>BitBucket site</a>.  To get the source code, you can clone our git repository by running
 \code{.sh}
 git clone https://bitbucket.org/mituq/muq2
 \endcode
 in a terminal.  While it is usually better to clone our repository, so you can easily obtain updates and bugfixes, you can also download a version of MUQ <a href=https://bitbucket.org/mituq/muq2/downloads>here</a>.
 *
 * \section Dependencies
 * MUQ requires several libraries and will install them if they can't be found during installation.  In particular, MUQ requires
 * The required dependencies are:
 * - <a href=http://www.boost.org/>Boost</a> (General c++ tools, graph library, and serialization)
 * - <a href=http://eigen.tuxfamily.org/>Eigen</a> (Templated linear algebra package)
 * - <a href=http://www.hdfgroup.org/HDF5/>HDF5</a>  (Structured binary file library)
 * - <a href=http://mc-stan.org/>Stan Math</a> (Hamiltonian MCMC sampler)
 * - <a href=https://computation.llnl.gov/projects/sundials>Sundials</a> (ODE integration)
 * Many more optional dependencies can also be exploited in MUQ.  Currently, we can use
 * - <a href=https://code.google.com/p/googletest/>GTEST</a>  (Google testing framework)
 * - <a href=http://software.intel.com/en-us/intel-mkl>Intel MKL</a> (BLAS and LAPACK routines to accelerate Eigen)
 * - <a href=https://www.python.org/>Python</a>
 *
 * In the past, this large number of dependencies has made installation difficult.  However, we have dramatically
 * improved the build process with some more advanced cmake tools.  Now, during the MUQ build, if required libraries are
 * not found or can not be linked against, cmake will download the package and install the dependency in a local
 * “external” folder.
 *
 *  \section bi Basic installation
 *  The most basic installation of MUQ can be performed by simply changing into the build directory and running cmake
 *  with an optional install prefix.  This will produce a makefile and MUQ can then be compiled by running make.  This
 *  two step process is illustrated below:
   \code{.sh}
   cd build
   cmake -DCMAKE_INSTALL_PREFIX=/my/install/path ..
   make
   make install
   \endcode
 *  With this command, cmake will look for all required libraries in default locations and will default to turning off
 *  all optional dependencies.  It is important to recall that MUQ makes extensive use of c++11 features.  Thus, to
 *  compile MUQ with this simple command, the default c++ compiler must support c++11.  g++ 4.7 or later will work, as will
 *  recent versions of clang.
 *
 *  At the end of the cmake run, a log file (summary.log) will be produced in the build directory and echoed to the
 *screen.  This summary will list what optional dependencies are being used, the compiler to bed used, and where cmake
 *found the required libraries.  An example of this summary is below:
 *  \code{.sh}
 #############################################
 #
 #  MUQ configuration:
 #        CMAKE_BUILD_TYPE:         Release
 #        BUILD_SHARED_LIBS:
 #        BUILD_STATIC_LIBS:
 #        CMAKE_INSTALL_PREFIX:     /Users/rdcrlmdp/Installations/MUQ_INSTALL
 #        CMAKE_SOURCE_DIR:         /Users/rdcrlmdp/Documents/Repositories/muq-all/muq2
 #        CMAKE_BINARY_DIR:         /Users/rdcrlmdp/Documents/Repositories/muq-all/muq2/build
 #        CMAKE_CXX_COMPILER name:  Clang 9.0.0.9000039 on platform Darwin x86_64
 #        CMAKE_CXX_COMPILER path:  /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++
 #
 #  Compiler flags used for this build:
 #        CMAKE_CXX_FLAGS:        -g -std=c++11 -stdlib=libc++ -Wall -g -Wno-unused-function -Wno-redeclared-class-member -Wno-deprecated-register -Wno-uninitialized -Wno-sign-compare -Wno-unknown-pragmas -Wunused-function -Wno-unused-variable -Wno-overloaded-virtual -DGTEST_USE_OWN_TR1_TUPLE=1 -pthread -O3
 #
 #  Compiler definitions used for this build:
 #        COMPILE_DEFINITIONS:
 #
 #  Required dependencies:
 #        EIGEN3 ---------------> Met with internal build -- Failed compilation test.
 #
 #        BOOST ----------------> Met with existing library:
 #                                Include Directory:
 #                                  /usr/local/include
 #                                Libraries:
 #                                  /usr/local/lib/libboost_system-mt.dylib
 #                                  /usr/local/lib/libboost_filesystem-mt.dylib
 #                                  /usr/local/lib/libboost_regex-mt.dylib
 #                                  /usr/local/lib/libboost_serialization-mt.dylib
 #                                  /usr/local/lib/libboost_graph-mt.dylib
 #                                  /usr/local/lib/libboost_date_time-mt.dylib
 #
 #        HDF5 -----------------> Met with existing library:
 #                                Include Directory:
 #                                  /usr/local/include
 #                                Libraries:
 #                                  /usr/local/lib/libhdf5.dylib
 #                                  /usr/local/lib/libhdf5_hl.dylib
 #
 #        FLANN ----------------> Not required for selected compile groups.
 #
 #        SUNDIALS -------------> Met with internal build -- Could not find library.
 #
 #
 #  Optional dependencies:
 #        GTEST ----------------> ON.
 #                                Include Directory:
 #                                  /Users/rdcrlmdp/Installations/gtest_install/include
 #                                Libraries:
 #                                  /Users/rdcrlmdp/Installations/gtest_install/lib/libgtest.a
 #
 #
 #  Optional tools:
 #        MPI: ----------------->
 #
 #  MUQ Modules:
 #        Utilities:
 #        pyUtilities:
 #        Modeling:
 #        pyModeling:
 #        Approximation:
 #        pyApproximation:
 #        SamplingAlgorithms:
 #        pySamplingAlgorithms:
 #        Inference:
 #
 #  MUQ Libraries:
 #        muqUtilities;muqModeling;muqApproximation;muqSamplingAlgorithms;muqInference
 #############################################

   \endcode
   From the summary, we can see that most of the required libraries were already installed, and found in the usual
 /usr/local location.  However, the summary shows that Eigen did not pass some internal compilation tests and will be built during the MUQ
 compilation.  If the summary shows that a library was found when you know it exists on your system, you can easily specify
 the library location by adding "-DMUQ_<DepdencyName>_DIR=<PathToLibrary>" to the cmake call.  This procedure is
 outlined in the advanced installation procedure below.

   \section ci Advanced installation
   \subsection ci1 Specifying dependency locations
   In some cases, cmake might not be able to find libraries on your system, or you might want to use a different
 version of the library than what is present in the standard locations.  This can be done by manually specifying to
 root directory of the library.  For example, if my SUNDIALS libraries are installed in /path/to/sundials/lib, and my
 SUNDIALS header files are installed in /path/to/sundials/include, I can pass this information on to cmake with the
 following command:
   \code{.sh}
   cmake -DMUQ_SUNDIALS_DIR=/path/to/sundials ..
   \endcode
   In general, the root directory for the \a PACKAGE dependency can be set by defining MUQ_\a PACKAGE _DIR during the
 call to cmake.  Also notice that the path given to sundials does not have last "include" or "lib" folder.  The
 cmake scripts in MUQ will automatically add these later on.

   \subsection ci2 Using optional dependencies

   Much like the way required library paths can be set.  The use of optional libraries can be defined during the cmake
 call.  The use of a package \a PACKAGE can be turned on or off by defining MUQ_USE_\a PACKAGE.  For example, the
 following cmake call turns on all optional dependencies except ARMADILLO.

   \code{.sh}

 cmake -DMUQ_USE_GTEST=ON                           \
       -DMUQ_USE_NLOPT=ON                           \
       ..

   \endcode

   \subsection ci3 Specifying the compiler
   CMake uses the CMAKE_CXX_COMPILER and CMAKE_C_COMPILER to specify the c++ and c compilers.  Thus, to specify the
 compiler used to build MUQ, these variables can be set during the cmake call:
   \code{.sh}

   cmake -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-4.7.1 \
      -DCMAKE_C_COMPILER=/usr/local/bin/gcc-4.7.1   \
      ..
   \endcode

 \subsection ci4 Compile Groups
 On a high level, MUQ is organized into separate libraries (e.g., muqModeling, muqApproximation).
 However, it is also possible to control what parts of MUQ are compiled at a more
 fine grained level.   At the fine level, MUQ uses a concept called a "Compile Group,"
 which is a set of related c++ source files that should be compiled together.

 More information on how to use compile groups is coming...

 */
