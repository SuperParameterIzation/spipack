/**
 * \mainpage
 * Welcome to the MUQ (pronounced “muck”) API documentation.
 *
 * <h3> Installation: </h3>
 * For information on how to build and install MUQ, check out \ref muqinstall
 *
 * <h3> Getting started: </h3>
 * MUQ contains several modules for solving Uncertainty Quantification (UQ) related problems.  Most of the modules depend on constructing models (either statistical models or process models), so we recommend getting started with MUQ by familiarizing yourself with the \ref Modelling module.  With a basic understanding of constructing models, you can start investigating the tools from other modules:
 <ul>
 <li> <b>\ref Modeling :</b> The modeling module defines classes and methods for constructing both process-based (e.g. physical) and statistical models.  Densities, random variables, and forward models can all be defined using the tools in \ref Modelling. </li>
 <li> <b>\ref SamplingAlgorithms :</b> This module contains tools for sampling probability distributions, including MCMC. </li>
 <li> <b>\ref Approximation :</b> The approximation module contains a suite of tools for function approximation such as Gaussian processes.</li>
 <li> <b>\ref Utilities : </b> The utilities module contains general odds an ends needed by the rest of MUQ.  Typical tools in the Utilities modules are random number generators and tools for interacting with HDF5 files. </li>
 </ul>

 <h3>Getting help</h3>
 MUQ has many features and we know that it can be difficult to find what you are looking for when starting out.  We recommend that users start by finding an example that is similar to their problem and adapting the example to suit their needs.  If an appropriate example is not available, or you need more information, questions can be posted to <a href="http://nusselt.mit.edu/qa">MUQ's Q&A site</a>.

 <h3>Parameters</h3>
 Many of the tools in MUQ require manually setting algorithm-specific parameters.  In c++, MUQ stores these values in the boost::property_tree:ptree container.  In Python, MUQ uses the standard python dict object.
 */
