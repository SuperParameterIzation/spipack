// This file was generated by the ExaHyPE toolkit.
// It will not be overwritten.
//
// ========================
//   www.exahype.eu
// ========================
#ifndef UpdateMicroscaleMethods_CLASS_HEADER_
#define UpdateMicroscaleMethods_CLASS_HEADER_

#include <MUQ/SamplingAlgorithms/SampleCollection.h>

#include "exahype/plotters/LimitingADERDG2UserDefined.h"

namespace spiEX_Boltzmann {
  class UpdateMicroscaleMethods;
}

class spiEX_Boltzmann::UpdateMicroscaleMethods : public exahype::plotters::LimitingADERDG2UserDefined {
 public:
  /**
   * Constructor.
   *
   * \note ExaHyPE does not increment file counters for
   * you if you use user defined plotting. You have
   * to declare and manage such member variables yourself.
   */
  UpdateMicroscaleMethods();

  /**
   * This method is invoked every time an ADER-DG cell
   * is touched by the plotting plotter.
   *
   * \note Use the protected variables _order, _variables to
   * determine the size of u.
   * The array u has the size _variables * (_order+1)^DIMENSIONS.
   *
   * \param[in] offsetOfPatch the offset of the cell/patch.
   * \param[in] sizeOfPatch the offset of the cell/patch.
   * \param[in] u the degrees of freedom "living" inside of the patch.
   */
  void plotADERDGPatch(
      const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
      const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch, double* const u,
      double timeStamp) override;

  /**
   * This method is invoked every time a Finite Volume cell
   * is touched by the plotting plotter.
   *
   * \note Use the protected variables _order, _variables to
   * determine the size of u.
   * The array u has the size _variables * (_order+1)^DIMENSIONS.
   *
   * \param[in] offsetOfPatch the offset of the cell/patch.
   * \param[in] sizeOfPatch the offset of the cell/patch.
   * \param[in] u the degrees of freedom "living" inside of the patch.
   */
  void plotFiniteVolumesPatch(
      const tarch::la::Vector<DIMENSIONS, double>& offsetOfPatch,
      const tarch::la::Vector<DIMENSIONS, double>& sizeOfPatch, double* const u,
      double timeStamp) override;

  /**
   * This method is called at the beginning of the plotting.
   * You can use it to reset member variables, e.g., those
   * used for calculations, or to increment file counters.
   *
   * \param[in] time a characteristic solver time stamp.
   *            Usually the global minimum.
   */
  void startPlotting( double time) override;

  /**
   * This method is called at the end of the plotting.
   * You can use it to reset member variables, finalise calculations (compute square roots etc.),
   * or to increment file counters
   */
  void finishPlotting() override;

  /// The current time of the macro-scale simulation
  double currentTime = std::numeric_limits<double>::quiet_NaN();

  /// Store the state at grid points
  std::shared_ptr<muq::SamplingAlgorithms::SampleCollection> states;
};

#endif /* UpdateMicroscaleMethods_CLASS_HEADER_ */
