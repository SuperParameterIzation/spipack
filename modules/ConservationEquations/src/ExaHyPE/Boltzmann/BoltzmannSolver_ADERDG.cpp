// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
//
// ========================
//   www.exahype.eu
// ========================

#include "BoltzmannSolver_ADERDG.h"

#include "BoltzmannSolver_ADERDG_Variables.h"

#include "kernels/KernelUtils.h"
#include "peano/utils/Loop.h"

tarch::logging::Log Boltzmann::BoltzmannSolver_ADERDG::_log( "Boltzmann::BoltzmannSolver_ADERDG" );


void Boltzmann::BoltzmannSolver_ADERDG::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // Tip: You find documentation for this method in header file "Boltzmann::BoltzmannSolver_ADERDG.h".

  // @todo Please implement/augment if required


}

void Boltzmann::BoltzmannSolver_ADERDG::adjustPointSolution(const double* const x,const double t,const double dt,double* const Q) {
  if (tarch::la::equals(t,0.0)) {
    Variables vars(Q);

    vars.massDensity() = 1.0+x[0]*x[1];
    vars.momentum(1.0, 0.0);
    vars.coordinates(x[0], x[1]);
  }
}

void Boltzmann::BoltzmannSolver_ADERDG::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int direction,const double* const fluxIn,const double* const stateIn,const double* const gradStateIn,double* const fluxOut,double* const stateOut) {
  // Tip: You find documentation for this method in header file "Boltzmann::BoltzmannSolver_ADERDG.h".
  // Tip: See header file "Boltzmann::AbstractBoltzmannSolver_ADERDG.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required
  stateOut[0] = 0.0;
  stateOut[1] = 0.0;
  stateOut[2] = 0.0;
  stateOut[3] = 0.0;
  stateOut[4] = 0.0;

  fluxOut[0] = 0.0;
  fluxOut[1] = 0.0;
  fluxOut[2] = 0.0;
  fluxOut[3] = 0.0;
  fluxOut[4] = 0.0;
}

exahype::solvers::Solver::RefinementControl Boltzmann::BoltzmannSolver_ADERDG::refinementCriterion(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,const int level) {
  // Tip: You find documentation for this method in header file "Boltzmann::BoltzmannSolver_ADERDG.h".
  // Tip: See header file "Boltzmann::AbstractBoltzmannSolver_ADERDG.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // Tip: See header file "peano/utils/Loop.h" for dimension-agnostic for loops.

  //  Example: Loop over all pointwise state variables (plus parameters)
  //
  //  constexpr int sizeOfQ = NumberOfVariables+NumberOfParameters;
  //  dfor(i,Order+1) {
  //    const int iLinearised = dLinearised(i,Order+1);
  //    const double* const Q = luh + iLinearised * sizeOfQ; // pointwise state variables (plus parameters)
  //    // use Q[0], Q[1], ... Q[sizeOfQ-1]
  //  }

  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this
// file and its header and rerun the toolkit
//*****************************************************************************


void Boltzmann::BoltzmannSolver_ADERDG::eigenvalues(const double* const Q,const int direction,double* const lambda) {
  // Tip: You find documentation for this method in header file "Boltzmann::BoltzmannSolver_ADERDG.h".
  // Tip: See header file "Boltzmann::AbstractBoltzmannSolver_ADERDG.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required
  lambda[0] = 1.0;
  lambda[1] = 1.0;
  lambda[2] = 1.0;
  lambda[3] = 1.0;
  lambda[4] = 1.0;
}





void Boltzmann::BoltzmannSolver_ADERDG::flux(const double* const Q,double** const F) {
  // Tip: You find documentation for this method in header file "Boltzmann::BoltzmannSolver_ADERDG.h".
  // Tip: See header file "Boltzmann::AbstractBoltzmannSolver_ADERDG.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required
  F[0][0] = 0.0;
  F[0][1] = 0.0;
  F[0][2] = 0.0;
  F[0][3] = 0.0;
  F[0][4] = 0.0;

  F[1][0] = 0.0;
  F[1][1] = 0.0;
  F[1][2] = 0.0;
  F[1][3] = 0.0;
  F[1][4] = 0.0;

}


//You can either implement this method or modify fusedSource
void Boltzmann::BoltzmannSolver_ADERDG::algebraicSource(const tarch::la::Vector<DIMENSIONS, double>& x, double t, const double *const Q, double *S) {
  // Tip: You find documentation for this method in header file "Boltzmann::BoltzmannSolver_ADERDG.h".
  // Tip: See header file "Boltzmann::AbstractBoltzmannSolver_ADERDG.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // @todo Please implement/augment if required
  S[0] = 0.0;
  S[1] = 0.0;
  S[2] = 0.0;
  S[3] = 0.0;
  S[4] = 0.0;
}
